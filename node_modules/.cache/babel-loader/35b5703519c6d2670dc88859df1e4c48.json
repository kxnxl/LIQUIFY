{"ast":null,"code":"import _regeneratorRuntime from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./navbar\";\nimport Main from \"./Main\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWD.json\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"No ethereum detected! check your metamask\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                // console.log(networkId);\n                //LOAD Tether TOKEN\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context2.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context2.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context2.next = 19;\n                break;\n\n              case 18:\n                window.alert(\"tether contract not deployed to detect network\");\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context3.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"0x0\",\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      stakingBalance: \"0\",\n      tetherBalance: \"0\",\n      rewardBalance: \"0\",\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/kunal/BLOCKCHAIN/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","Tether","RWD","DecentralBank","App","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","loadWeb3","loadBlockchainData","props","rwd","decentralBank","stakingBalance","rewardBalance","loading"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;IAEMC,G;;;;;;;;;;;qBAEEC,MAAM,CAACC,Q;;;;;AACTD,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACD,oBAAIH,MAAM,CAACE,IAAX,EAAiB;AACtBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,iBAFM,MAEA;AACLJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,2CAAb;AACD;;;;;;;;;;;;;;;;;;;;;;;;;AAIKH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACGA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAAEC,kBAAAA,OAAO,EAAEF,QAAQ,CAAC,CAAD;AAAnB,iBAAd;;uBACwBN,IAAI,CAACI,GAAL,CAASK,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACN;AAEA;AACMC,gBAAAA,U,GAAalB,MAAM,CAACmB,QAAP,CAAgBF,SAAhB,C;;qBACfC,U;;;;;AACIE,gBAAAA,M,GAAS,IAAId,IAAI,CAACI,GAAL,CAASW,QAAb,CAAsBrB,MAAM,CAACsB,GAA7B,EAAkCJ,UAAU,CAACK,OAA7C,C;AACf,qBAAKV,QAAL,CAAc;AAAEO,kBAAAA,MAAM,EAANA;AAAF,iBAAd;;uBAC0BA,MAAM,CAACI,OAAP,CACvBC,SADuB,CACb,KAAKC,KAAL,CAAWZ,OADE,EAEvBa,IAFuB,E;;;AAAtBC,gBAAAA,a;AAGJ,qBAAKf,QAAL,CAAc;AAAEe,kBAAAA,aAAa,EAAEA,aAAa,CAACC,QAAd;AAAjB,iBAAd;;;;;AAEAzB,gBAAAA,MAAM,CAACK,KAAP,CAAa,gDAAb;;;;;;;;;;;;;;;;;;;;;;;;;uBAiCI,KAAKqB,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;AAGR,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKN,KAAL,GAAa;AACXZ,MAAAA,OAAO,EAAE,KADE;AAEXM,MAAAA,MAAM,EAAE,EAFG;AAGXa,MAAAA,GAAG,EAAE,EAHM;AAIXC,MAAAA,aAAa,EAAE,EAJJ;AAKXC,MAAAA,cAAc,EAAE,GALL;AAMXP,MAAAA,aAAa,EAAE,GANJ;AAOXQ,MAAAA,aAAa,EAAE,GAPJ;AAQXC,MAAAA,OAAO,EAAE;AARE,KAAb;AAFiB;AAYlB;;;;6BACQ;AACP,0BACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWZ,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EArFelB,S;;AAwFlB,eAAeO,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./navbar\";\nimport Main from \"./Main\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWD.json\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\n\nclass App extends Component {\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"No ethereum detected! check your metamask\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    const networkId = await web3.eth.net.getId();\n    // console.log(networkId);\n\n    //LOAD Tether TOKEN\n    const tetherData = Tether.networks[networkId];\n    if (tetherData) {\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n      this.setState({ tether });\n      let tetherBalance = await tether.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ tetherBalance: tetherBalance.toString() });\n    } else {\n      window.alert(\"tether contract not deployed to detect network\");\n    }\n\n    // const rwdData = RWD.networks[networkId];\n    // if (rwdData) {\n    //   const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n    //   let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\n    //   this.setState({\n    //     rwdBalance: rwdBalance.toString(),\n    //     rwd: rwd,\n    //   });\n    // } else {\n    //   window.alert(\"Contract not deployed on the blockchain\");\n    // }\n\n    // const decentralBankData = DecentralBank.networks[networkId];\n    // if (decentralBankData) {\n    //   const decentralBank = new web3.eth.Contract(\n    //     DecentralBank.abi,\n    //     decentralBankData.address\n    //   );\n    //   this.setState({ decentralBank });\n    //   let stakingBalance = await decentralBank.methods\n    //     .stakingBalance(this.state.account)\n    //     .call();\n    //   this.setState({ stakingBalance: stakingBalance.toString() });\n    //   console.log(\"staking balance\", stakingBalance);\n    // } else {\n    //   window.alert(\"Contract not deployed on the blockchain\");\n    // }\n  }\n\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"0x0\",\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      stakingBalance: \"0\",\n      tetherBalance: \"0\",\n      rewardBalance: \"0\",\n      loading: true,\n    };\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar account={this.state.account} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}